import sys
import logging
import typing
from datetime import datetime
from sys import exception

from PyQt5 import QtCore
from PyQt5.QtGui import QPainter
from PyQt5.QtWidgets import QApplication, QMainWindow, QGraphicsView, QGraphicsScene
from PyQt5.QtSvg import QSvgRenderer, QGraphicsSvgItem
from PyQt5.QtCore import Qt, QSettings, QByteArray, QObject, QThread
# import xml.etree.ElementTree as etree
from lxml import etree
from WarThunder import telemetry
import copy
import json

version = '0.0.2'


# –ö–ª–∞—Å—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏ –∏–∑ WT
class BrowserWT(QObject):
    # –ö–ª–∞—Å—Å —á–∏—Ç–∞—é—â–∏–π —Ç–µ–ª–µ–º–µ—Ç—Ä–∏—é –∏–∑ WT
    TelemInterface = telemetry.TelemInterface()
    telemetrySignal = QtCore.pyqtSignal(object)

    def run(self):
        while True:
            QtCore.QThread.msleep(100)
            full_telemetry = None

            # –ü–æ–∫–∞ –±–µ–∑ —Å–æ–±—ã—Ç–∏–π –∏ —á–∞—Ç–∞
            if self.TelemInterface.get_telemetry(comments=False, events=False):
                full_telemetry = self.TelemInterface.full_telemetry
                current_time = datetime.now()
                full_telemetry['clock_hour'] = current_time.hour
                full_telemetry['clock_min'] = current_time.minute
                full_telemetry['clock_sec'] = current_time.second
                full_telemetry['clock_microsecond'] = current_time.microsecond
            self.telemetrySignal.emit(full_telemetry)


class MainWindow(QMainWindow):
    namespaces = {'svg': 'http://www.w3.org/2000/svg'}
    file_path = "main.svg"

    def sensor_gear_indicator(self, indicator, telemetry):
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∏–ª—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª–æ–∂–µ–Ω–∏—è —à–∞—Å—Å–∏, –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ —Å –∏–º–µ–Ω–µ–º: gear_indicator
        –î–æ—Å—Ç—É–ø–Ω—ã —Å—Ç–∏–ª–∏ –¥–ª—è –ø–æ–ª–æ–∂–µ–Ω–∏—è:
        - –®–∞—Å—Å–∏ –≤—ã–ø—É—â–µ–Ω—ã("down")
        - –í –ø—Ä–æ—Ü–µ—Å—Å–µ("process")
        - –®–∞—Å—Å–∏ —É–±—Ä–∞–Ω—ã("up")
        –ü—Ä–∏–º–µ—Ä:
            data-boundary-value='{
                                    "down":   {"style": "fill: rgb(255, 86, 48); font-size: 60px; font-family: Consolas; font-weight: 550"},
                                    "process":{"style": "fill: rgb(0, 157, 2)  ; font-size: 60px; font-family: Consolas; font-weight: 550"},
                                    "up":     {"style": "visibility: hidden"}
                                 }'
            –í —Å–ª—É—á–∞–µ –µ—Å–ª–∏ —à–∞—Å—Å–∏ —É–±—Ä–∞–Ω—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è
        :param indicator: –ö—É–¥–∞ –±—É–¥–µ–º –ø–æ–º–µ—â–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ
        :param telemetry: –°–ª–æ–≤–∞—Ä—å —Å —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–µ–π –æ—Ç WT
        """

        value = int(telemetry['gear, %'])
        key = 'down'
        if 0 < value < 100:
            key = 'process'
        else:
            if value ==0:
                key = 'up'

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —É—Å–ª–æ–≤–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        data_boundary_value = indicator.get('data-boundary-value', '').strip()
        if data_boundary_value != '':
            boundary_list = json.loads(data_boundary_value)
            print(key)
            if key in boundary_list:
                indicator.set('style', boundary_list[key]["style"])

    def sensor_altitude_u(self, indicator, telemetry):
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å–µ–Ω—Å–æ—Ä–∞: altitude_u
        –ê–ª–≥–æ—Ä–∏–º —Å–ª–µ–¥—É—é—â–∏–π, –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–∞–¥–∏–æ –≤—ã—Å–æ—Ç–∞ —Ç–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–µ, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç —Ç–æ –±–∞—Ä–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫—É—é, –¥–ª—è –±–∞—Ä–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–π –≤—ã—Å–æ—Ç—ã –¥–æ–±–∞–≤–ª—è–µ–º üõÜ –ø–µ—Ä–µ–¥ —á–∏—Å–ª–æ–º

        :param indicator: –ö—É–¥–∞ –±—É–¥–µ–º –ø–æ–º–µ—â–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ
        :param telemetry: –°–ª–æ–≤–∞—Ä—å —Å —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–µ–π –æ—Ç WT
        """
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
        text_format = indicator.get('data-sensor-text-format', '').strip()
        value = float(telemetry['altitude_hour'])
        indicator.text = f'üõÜ{value:{text_format}}'
        if 'radio_altitude_m' in telemetry:
            value = float(telemetry['radio_altitude_m'])
            indicator.text = f'{value:{text_format}}'

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —É—Å–ª–æ–≤–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        data_boundary_value = indicator.get('data-boundary-value', '').strip()
        if data_boundary_value != '':
            boundary_list = json.loads(data_boundary_value)
            for item in boundary_list:
                if value < float(item["boundary"]):
                    indicator.set('style', item["style"])
                    break

    def update_mfd(self, telemetry):

        if not telemetry:
            self.svg_item.setVisible(False)
            return
        else:
            if not self.svg_item.isVisible():
                self.svg_item.setVisible(True)

        # –†–∞–±–æ—Ç–∞—Ç—å –±—É–¥–µ–º —Å –∫–æ–ø–∏–µ–π –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏, –∏–Ω–∞—á–µ –∑–∞–¥–æ–ª–±–∞–µ—à—å—Å—è –ø–æ—Ç–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—å –∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—Å–µ —Å–∫—Ä—ã—Ç—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã.
        svg_work_copy = copy.deepcopy(self.svg_root)
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º data-sensor-name –≤–æ –≤—Å–µ–º –¥–µ—Ä–µ–≤–µ
        elements = svg_work_copy.findall('.//*[@data-sensor-name]', namespaces=self.namespaces)
        for indicator in elements:
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã
            id = indicator.get('id', '').strip()
            sensor_name = indicator.get('data-sensor-name', '').strip()
            text_format = indicator.get('data-sensor-text-format', '').strip()
            data_boundary_value = indicator.get('data-boundary-value', '').strip()

            # –ò–º—è —Å–µ–Ω—Å–æ—Ä–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–¥–∞–Ω–æ
            if not sensor_name:
                continue
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–µ–Ω—Å–æ—Ä—ã —É –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –±—ã–ª–æ –æ—à–∏–±–æ–∫
            if sensor_name in self.sensor_has_error:
                continue
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            try:
                if sensor_name in ['altitude_u', 'gear_indicator']:
                    if sensor_name == 'altitude_u':
                        self.sensor_altitude_u(indicator, telemetry)

                    if sensor_name == 'gear_indicator':
                        self.sensor_gear_indicator(indicator, telemetry)
                    continue

            except Exception as e:
                self.sensor_has_error.append(sensor_name)
                logging.error(f'–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞: {e}. ID ={id} data-sensor-name={sensor_name} sensor_value={telemetry[sensor_name]}')
                continue

            # –ï—Å–ª–∏ —Å–µ–Ω—Å–æ—Ä–∞ –Ω–µ –Ω–∞—à–ª–∏ –≤ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏, —Ç–æ —Å–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ
            if sensor_name not in telemetry:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç–ª–µ–º–µ–Ω—Ç tspan
                tag_local = indicator.tag.split('}')[-1]  # –õ–æ–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ç–µ–≥–∞ –±–µ–∑ namespace
                if tag_local == 'tspan':
                    # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç
                    parent = indicator.getparent()
                    if parent is not None:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –≤—Ö–æ–¥–∏—Ç –ª–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç –≤ –≥—Ä—É–ø–ø—É, –µ—Å–ª–∏ –¥–∞, —Ç–æ —Å–∫—Ä—ã–≤–∞–µ–º –≤—Å—é –≥—Ä—É–ø–ø—É
                        group = parent.getparent()
                        if group is not None and group.tag.split('}')[-1] == 'g':
                            # –°–∫—Ä—ã–≤–∞–µ–º –≤—Å—é –≥—Ä—É–ø–ø—É
                            group.set('display', 'none')
                        else:
                            # –°–∫—Ä—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç text
                            parent.set('display', 'none')
                else:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–∏—Ç –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –≤ –≥—Ä—É–ø–ø—É
                    group = indicator.getparent()
                    if group is not None and group.tag.split('}')[-1] == 'g':
                        # –°–∫—Ä—ã–≤–∞–µ–º –≤—Å—é –≥—Ä—É–ø–ø—É
                        group.set('display', 'none')
                    else:
                        # –°–∫—Ä—ã–≤–∞–µ–º —Å–∞–º —ç–ª–µ–º–µ–Ω—Ç
                        indicator.set('display', 'none')
                continue
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å–µ–Ω—Å–æ—Ä–∞
            try:
                indicator.text = f'{telemetry[sensor_name]:{text_format}}'
            except Exception as e:
                self.sensor_has_error.append(sensor_name)
                logging.warning(
                    f'–û—à–∏–±–∫–∞ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}. ID ={id} data-sensor-name={sensor_name} data-sensor-text-format={text_format}')
                continue

            # –ü—Ä–∏–º–µ–Ω—è–µ–º —É—Å–ª–æ–≤–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            try:
                if data_boundary_value != '':
                    value = float(telemetry[sensor_name])
                    boundary_list = json.loads(data_boundary_value)
                    for item in boundary_list:
                        if value < float(item["boundary"]):
                            indicator.set('style', item["style"])
                            break
            except Exception as e:
                self.sensor_has_error.append(sensor_name)
                logging.warning(
                    f'–û—à–∏–±–∫–∞ –≤ —É—Å–ª–æ–≤–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}. ID ={id} data-sensor-name={sensor_name} data-sensor-text-format={text_format}  data_boundary_value={data_boundary_value} sensor_value={telemetry[sensor_name]} ')
                continue

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–∞–Ω–Ω—ã–º–∏ —Å–µ–Ω—Å–æ—Ä–æ–≤
        self.renderer.load(etree.tostring(svg_work_copy))
        svg_size = self.renderer.defaultSize()
        self.scene.setSceneRect(0, 0, svg_size.width(), svg_size.height())
        self.svg_item.update()

    def __init__(self):
        super().__init__()

        self.fm_data = {}

        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∏–∑ —Ñ–ª–∞–π—Ç –º–æ–¥–µ–ª–∏
            with open('wtmfd_data.json', 'r', encoding="utf-8") as file:
                self.fm_data.update(json.load(file))
        except Exception as e:
            logging.warning(f'–ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–ª–∞–π—Ç –º–æ–¥–µ–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞: {e} ')

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.sensor_has_error = []

        self.setWindowTitle(f'WT MDF {version}')

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        self.scene = QGraphicsScene()
        self.view = QGraphicsView(self.scene)
        self.setCentralWidget(self.view)

        # –ó–∞–≥—Ä—É–∑–∫–∞ SVG-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.renderer = QSvgRenderer(self.file_path)
        if not self.renderer.isValid():
            raise ValueError("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ SVG-—Ñ–∞–π–ª–∞")

        # –ü–∞—Ä—Å–∏–º SVG –∫–∞–∫ XML
        self.svg_tree = etree.parse(self.file_path)
        self.svg_root = self.svg_tree.getroot()

        self.svg_item = QGraphicsSvgItem()
        self.svg_item.setSharedRenderer(self.renderer)
        self.scene.addItem(self.svg_item)

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ —Å—Ü–µ–Ω—ã
        svg_size = self.renderer.defaultSize()
        self.scene.setSceneRect(0, 0, svg_size.width(), svg_size.height())
        self.scene.setBackgroundBrush(Qt.black)
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.view.setRenderHint(QPainter.Antialiasing)
        self.view.setAlignment(Qt.AlignCenter)
        self.view.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        self.view.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOff)

        # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.load_window_settings()

        self.update_mfd({})

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–ª–µ–º–µ—Ç—Ä–∏—é
        # –°–æ–∑–¥–∞–µ–º –Ω–∏—Ç—å
        self.threadWT = QThread()
        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        self.browserWT = BrowserWT()
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ –Ω–∏—Ç—å
        self.browserWT.moveToThread(self.threadWT)
        # –°–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        self.browserWT.telemetrySignal.connect(self.telemetry_processor)
        # –£–∫–∞–∑—ã–≤–∞–µ–º –Ω–∏—Ç–∏ –∫–∞–∫–æ–π –º–µ—Ç–æ–¥ –∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å
        self.threadWT.started.connect(self.browserWT.run)
        # –ó–∞–ø—É—Å–∫–∞–µ–º
        self.threadWT.start()

    def closeEvent(self, event):
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º
        self.save_window_settings()
        super().closeEvent(event)

    def load_window_settings(self):
        settings = QSettings("settings.ini", QSettings.IniFormat)
        geometry = settings.value("geometry", QByteArray())
        window_state = settings.value("window_state", Qt.WindowNoState)

        if geometry.isEmpty():
            self.resize(400, 300)
            self.center_window()
        else:
            self.restoreGeometry(geometry)

        self.setWindowState(Qt.WindowState(int(window_state)))

    def save_window_settings(self):
        settings = QSettings("settings.ini", QSettings.IniFormat)
        settings.setValue("geometry", self.saveGeometry())
        settings.setValue("window_state", int(self.windowState()))

    def center_window(self):
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
        frame = self.frameGeometry()
        screen_center = QApplication.primaryScreen().availableGeometry().center()
        frame.moveCenter(screen_center)
        self.move(frame.topLeft())

    # –ü—Ä–∏–µ–º–Ω–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –Ω–∏—Ç–∫–∏ –æ—Ç–≤–µ—á–∞—é—â–∏–π –∑–∞ —á—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ WT
    @QtCore.pyqtSlot(object)
    def telemetry_processor(self, object):
        # –û–±–æ–≥–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —Ñ–ª–∞–π—Ç –º–æ–¥–µ–ª–∏ –∏ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã–º–∏ –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ —Ä–∞—Å—á–µ—Ç–æ–≤
        telem = None
        if object is not None:
            telem = object.copy()
            if 'radio_altitude' in telem:
                # –í—ã—á–∏—Å–ª—è–º —Ä–∞–¥–∏–æ –≤—ã—Å–æ—Ç—É –≤ –º–µ—Ç—Ä–∞—Ö
                telem['radio_altitude_m'] = float(telem['radio_altitude']) * 0.3048

            if 'type' in telem:
                plane_id = telem['type']
                if plane_id in self.fm_data:
                    telem['VNE'] = self.fm_data[plane_id]['VNE']
                    telem['MNE'] = self.fm_data[plane_id]['MNE']
                    telem['Name'] = self.fm_data[plane_id]['Name']['English']
                    telem['Length'] = self.fm_data[plane_id]['Length']
                    telem['WingSpan'] = self.fm_data[plane_id]['WingSpan']
                    telem['WingArea'] = self.fm_data[plane_id]['WingArea']
                    telem['EmptyMass'] = self.fm_data[plane_id]['EmptyMass']
                    telem['MaxFuelMass'] = self.fm_data[plane_id]['MaxFuelMass']
                    telem['VLO'] = self.fm_data[plane_id]['VLO']
                    telem['Flaps position'] = self.fm_data[plane_id]['Flaps']
                    telem['VFE'] = self.fm_data[plane_id]['VFE']
                    telem['CritWingOverload'] = self.fm_data[plane_id]['CritWingOverload']
                    telem['NumEngines'] = self.fm_data[plane_id]['NumEngines']
                    telem['RPMMin'] = self.fm_data[plane_id]['RPM']['RPMMin']
                    telem['RPMMax'] = self.fm_data[plane_id]['RPM']['RPMMax']
                    telem['RPMMaxAllowed'] = self.fm_data[plane_id]['RPM']['RPMMaxAllowed']
                    telem['MaxNitro'] = self.fm_data[plane_id]['MaxNitro']
                    telem['NitroConsum'] = self.fm_data[plane_id]['NitroConsum']
                    telem['CritAoA'] = self.fm_data[plane_id]['CritAoA']

        self.add_vne_persent(telem)
        self.update_mfd(telem)

    def add_vne_persent(self, telem):
        """ –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏—é –ø–∞—Ä–∞–º–µ—Ç—Ä VNE % - –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
        –ê–ª–≥–æ—Ä–∏—Ç–º —Ä–∞—Å—á–µ—Ç–∞, —Å—á–∏—Ç–∞–µ–º:
          - IAS, km/h / VNE
          - M / MNE
        –ö–∞–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–æ–ª—å—à–µ —Ç–æ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏—é
        :param telem: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç–µ–ª–µ–º–µ—Ä–∏–∏
        :return:
        """
        try:
            if telem is not None and 'VNE' in telem and 'MNE' in telem:
                vne_percent = telem['IAS, km/h'] / telem['VNE'][0][1]
                mne_percent = telem['M'] / telem['MNE'][0][1]
                result_percent = mne_percent
                if vne_percent > mne_percent:
                    result_percent = vne_percent
                telem['VNE %'] = f'{float(result_percent * 100):.0f}'
        except Exception as e:
            logging.warning(f'{e} ')


if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec_())
